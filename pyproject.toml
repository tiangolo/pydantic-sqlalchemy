[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "pydantic-sqlalchemy"
dynamic = ["version"]
description = "Tools to convert SQLAlchemy models to Pydantic models"
readme = "README.md"
requires-python = ">=3.7"
authors = [
    { name = "Sebastián Ramírez", email = "tiangolo@gmail.com" },
]

dependencies = [
    "SQLAlchemy >=1.3.16,<2.0.0",
    "pydantic >=1.5.1,<2.0.0",
]

[project.urls]
Homepage = "https://github.com/tiangolo/pydantic-sqlalchemy"
Repository = "https://github.com/tiangolo/pydantic-sqlalchemy"
Issues = "https://github.com/tiangolo/pydantic-sqlalchemy/issues"

[tool.pdm]
version = { source = "file", path = "pydantic_sqlalchemy/__init__.py" }
distribution = true

[tool.pdm.build]
source-includes = [
    "tests/",
    "requirements*.txt",
    "scripts/",
    ]

[tool.coverage.run]
parallel = true
data_file = "coverage/.coverage"
source = [
    "tests",
    "pydantic_sqlalchemy"
]
context = '${CONTEXT}'
dynamic_context = "test_function"

[tool.coverage.report]
show_missing = true
sort = "-Cover"
exclude_lines = [
    "pragma: no cover",
    "@overload",
    'if __name__ == "__main__":',
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
show_contexts = true

[tool.mypy]
strict = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191", # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
# "__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-third-party = ["sqlalchemy", "pydantic"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
